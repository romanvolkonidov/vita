import telebot
from telebot import types
import re
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

API_TOKEN = os.getenv('API_TOKEN')
TEACHER_CHAT_ID = int(os.getenv('TEACHER_CHAT_ID'))

# Define quizzes for each class
quizzes = {
  "5 –∫–ª–∞—Å—Å": [
    {
      "question": "2 + 2 = ?",
      "options": ["3", "4", "5"],
      "answer": "4"
    },
    {
      "question": "10 - 7 = ?",
      "options": ["2", "3", "4"],
      "answer": "3"
    }
  ],
  "6 –∫–ª–∞—Å—Å": [
    {
      "question": "3 √ó 3 = ?",
      "options": ["6", "9", "12"],
      "answer": "9"
    },
    {
      "question": "15 √∑ 3 = ?", 
      "options": ["3", "5", "7"],
      "answer": "5"
    }
  ]
}

bot = telebot.TeleBot(API_TOKEN)

user_data = {}

def send_results(chat_id):
    data = user_data[chat_id]
    total = len(data['quiz'])
    correct = data['score']
    percent = round((correct / total) * 100)

    report = f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞\nüë§ –ò–º—è: {data['name']}\nüè´ –ö–ª–∞—Å—Å: {data['class']}\nüìä –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {correct}/{total} ({percent}%)\n\n"
    for i, a in enumerate(data['answers'], 1):
        status = "‚úÖ" if a['correct'] else "‚ùå"
        report += f"{i}. {a['question']}\n–û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞: {a['your_answer']}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {a['correct_answer']} {status}\n\n"

    # Send report to teacher
    bot.send_message(TEACHER_CHAT_ID, report)

    # Offer student to leave email for results and show % correct
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add("–î–∞", "–ù–µ—Ç")
    bot.send_message(
        chat_id,
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–≤–æ–µ–º—É —É—á–∏—Ç–µ–ª—é, –∏ –æ–Ω —Å–æ–æ–±—â–∏—Ç —Ç–µ–±–µ –æ—Ü–µ–Ω–∫—É.\n"
        f"–¢—ã –æ—Ç–≤–µ—Ç–∏–ª(–∞) –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {percent}% –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
        "–•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π email, —á—Ç–æ–±—ã —É—á–∏—Ç–µ–ª—å –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?",
        reply_markup=markup
    )
    user_data[chat_id]['step'] = 'ask_email'

@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get('step') == 'ask_email')
def ask_email(message):
    chat_id = message.chat.id
    text = message.text.strip()
    # Simple email check
    if re.match(r"[^@]+@[^@]+\.[^@]+", text):
        data = user_data.get(chat_id, {})
        name = data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        school_class = data.get('class', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        bot.send_message(TEACHER_CHAT_ID, f"–£—á–µ–Ω–∏–∫ {name} ({school_class}) –æ—Å—Ç–∞–≤–∏–ª email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {text}")
        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à email –ø–µ—Ä–µ–¥–∞–Ω —É—á–∏—Ç–µ–ª—é.")
        user_data.pop(chat_id, None)
        return
    if text == "–î–∞":
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π email:")
        user_data[chat_id]['step'] = 'get_email'
    else:
        bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –û–∂–∏–¥–∞–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç —É—á–∏—Ç–µ–ª—è.")
        user_data.pop(chat_id, None)

@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get('step') == 'get_email')
def save_email(message):
    chat_id = message.chat.id
    email = message.text
    # Notify teacher about student's email
    data = user_data.get(chat_id, {})
    name = data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    school_class = data.get('class', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    bot.send_message(TEACHER_CHAT_ID, f"–£—á–µ–Ω–∏–∫ {name} ({school_class}) –æ—Å—Ç–∞–≤–∏–ª email –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {email}")
    bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à email –ø–µ—Ä–µ–¥–∞–Ω —É—á–∏—Ç–µ–ª—é.")
    user_data.pop(chat_id, None)

@bot.message_handler(commands=['start'])
def ask_name(message):
    print(f"User chat id: {message.chat.id}")  # Add this line for debugging
    user_data[message.chat.id] = {}
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—ë –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤).")
    user_data[message.chat.id]['step'] = 'name'

@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get('step') == 'name')
def save_name(message):
    user_data[message.chat.id]['name'] = message.text
    user_data[message.chat.id]['step'] = 'class'
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for school_class in quizzes.keys():
        markup.add(school_class)
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –í –∫–∞–∫–æ–π –∫–ª–∞—Å—Å —Ç—ã —Ö–æ–¥–∏—à—å? –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)

@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get('step') == 'class' and m.text in quizzes)
def start_quiz(message):
    chat_id = message.chat.id
    chosen_class = message.text
    user_data[chat_id].update({
        'class': chosen_class,
        'quiz': quizzes[chosen_class],
        'q': 0,
        'score': 0,
        'answers': [],
        'step': 'quiz'
    })
    send_question(chat_id)

def send_question(chat_id):
    q_index = user_data[chat_id]['q']
    quiz = user_data[chat_id]['quiz']
    if q_index < len(quiz):
        question = quiz[q_index]
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for opt in question["options"]:
            markup.add(opt)
        bot.send_message(chat_id, question["question"], reply_markup=markup)
    else:
        send_results(chat_id)

@bot.message_handler(func=lambda m: user_data.get(m.chat.id, {}).get('step') == 'quiz')
def handle_answer(message):
    chat_id = message.chat.id
    data = user_data[chat_id]
    q_index = data['q']
    question = data['quiz'][q_index]
    user_answer = message.text

    # Accept only valid options
    if user_answer not in question['options']:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return

    correct = user_answer == question['answer']
    data['answers'].append({
        'question': question['question'],
        'your_answer': user_answer,
        'correct_answer': question['answer'],
        'correct': correct
    })
    if correct:
        data['score'] += 1
    data['q'] += 1
    send_question(chat_id)

if __name__ == '__main__':
    bot.polling()
